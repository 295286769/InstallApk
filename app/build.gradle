apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
def cfg = rootProject.ext.android
//release版本
def keystoreFilepath = ''
def keystorePSW = ''
def keystoreAlias = ''
def keystoreAliasPSW = ''
//debug版本
def keystoreFilepathdebug = ''
def keystorePSWdebug = ''
def keystoreAliasdebug = ''
def keystoreAliasPSWdebug = ''

Properties properties = new Properties()
properties.load(rootProject.file('keystore.properties').newDataInputStream())
//release版本
keystoreFilepath = properties.getProperty("keystore.path")
if (keystoreFilepath) {
    keystorePSW = properties.getProperty("keystore.password")
    keystoreAlias = properties.getProperty("keystore.alias")
    keystoreAliasPSW = properties.getProperty("keystore.alias_password")
}
//debug版本
keystoreFilepathdebug = properties.getProperty("pathdebug")
if (keystoreFilepathdebug) {
    keystorePSWdebug = properties.getProperty("passworddebug")
    keystoreAliasdebug = properties.getProperty("aliasdebug")
    keystoreAliasPSWdebug = properties.getProperty("alias_passworddebug")
}


android {
    signingConfigs {
        release {
            storeFile file(keystoreFilepath)
            storePassword keystorePSW
            keyAlias keystoreAlias
            keyPassword keystoreAliasPSW
        }
        pro {
            storeFile file(keystoreFilepath)
            storePassword keystorePSW
            keyAlias keystoreAlias
            keyPassword keystoreAliasPSW
        }
        debug {
            storeFile file(keystoreFilepathdebug)
            storePassword keystoreAliasPSWdebug
            keyAlias = keystoreAliasdebug
            keyPassword keystorePSWdebug
        }
    }
    compileSdkVersion localCompileSdkVersion.toInteger()
    buildToolsVersion localBuildToolsVersion
    defaultConfig {
        multiDexEnabled true
        applicationId cfg.applicationId
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }
    buildTypes {
        release {
            buildConfigField("String", "isDebug", '"release"')
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//                signingConfig signingConfigs.release
        }
        debug {
            buildConfigField("String", "isDebug", '"debug"')
            minifyEnabled false
//                signingConfig signingConfigs.debug
        }
        pro {
            minifyEnabled false
            buildConfigField("String", "isDebug", '"pro"')
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//                signingConfig signingConfigs.pro
        }
    }
    dataBinding {
        enabled = true
    }
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }
    repositories {
        flatDir {
            dirs 'libs'   // aar目录
        }
    }

}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar','*.aar'])
    if(isLibrary.toBoolean()){
        implementation project(':bluetoothlib')
    }
    kapt 'androidx.room:room-compiler:2.1.0'
    implementation project(':checkandinstallapk')
    implementation project(':common')
    implementation project(':componentservice')
}
